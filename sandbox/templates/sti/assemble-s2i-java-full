#!/bin/sh

# Enable debugging on highest log level
if [ x"${BUILD_LOG_LEVEL}" = x5 ]; then
  set -x
fi

# Which version of hawt app to use
hawt_app_version="2.2.53"

# ==============================================================================

# Global S2I variable setup
source `dirname "$0"`/s2i-setup

# Maven arguments setting up the environment
maven_env_args="-Dmaven.repo.local=${S2I_ARTIFACTS_DIR}/m2"

# =========================================================================
# Helper functions:

function check_error() {
  local label=$1
  local error=$2
  if [ ${error} -ne 0 ]; then
    echo "Aborting due to error code $error for $label"
    exit ${error}
  fi
}

# Ge a single pom property
function get_pom_property() {
  local property=$1
  local extra_args="${MAVEN_EXTRA_ARGS}"

  if [ "x${MAVEN_MODULE}" != x ]; then
    extra_args="${extra_args} -pl ${MAVEN_MODULE}"
  fi
  # Use maven-help-plugin to extract a property
  # It's a bit hackish to get rid of the boiler plate. The first line without a `[....]` prefix
  # and without a space in the logout is supposed to be the variable value. Won't work
  # for paths with space in it.
  local old_dir=$(pwd)
  cd ${S2I_SOURCE_DIR}
  mvn help:evaluate \
            ${maven_env_args} \
            ${extra_args} \
            -Dexpression="${property}" | \
            grep -v '^\[.*\]' | \
            grep -v ' ' | \
            head -n 1
  cd ${old_dir}
}

function get_output_dir() {
  # Where artifacts are created within the build
  local dir
  if [ x${OUTPUT_DIR} = x ] && [ x${MAVEN_MODULE} != x ]; then
    dir=$(get_pom_property "project.build.directory")
    if [ x"${dir}" = x ]; then
      echo "Please specify build directory OUTPUT_DIR explicitly since no build dir has been found"
      exit 1
    fi
  else
    dir=${OUTPUT_DIR:-${S2I_SOURCE_DIR}/target}
  fi
  # If output_dir is not absolute then use it relative to S2I_SOURCE_DIR
  if [ "${dir:0:1}" != "/" ]; then
    dir="${S2I_SOURCE_DIR}/${dir}"
  fi
  # Normalize dir
  dir=$(echo ${dir} | tr -s /)
  dir=${dir%/}
  # The parent must exist because target/ won't exist yet
  if [ ! -d $(dirname "${dir}"}) ]; then
    echo "Please specify a build directory OUTPUT_DIR (tried '$(dirname "${dir}")' which does not exist)"
    exit 1
  fi
  echo ${dir}
}

function copy_dir() {
  local src=$1
  local dest=$2

  cp -r ${src}/* ${dest}
  check_error "copying ${src} to ${dest}" $?
}

function mvn_settings_with_mirror {
  cat <<EOT
<settings>
  <mirrors>
    <mirror>
      <id>s2i-mirror</id>
      <url>$1</url>
      <mirrorOf>external:*</mirrorOf>
    </mirror>
  </mirrors>
</settings>
EOT
}

function setup_maven() {
  if [ x"${MAVEN_MIRROR_URL}" != x ]; then
    echo "`mvn_settings_with_mirror ${MAVEN_MIRROR_URL}`" > ${S2I_SOURCE_DIR}/mvn-mirrors-settings.xml
    maven_env_args="${maven_env_args} -s ${S2I_SOURCE_DIR}/mvn-mirrors-settings.xml"
  elif [ -f "${S2I_SOURCE_DIR}/configuration/settings.xml" ]; then
    maven_env_args="${maven_env_args} -s ${S2I_SOURCE_DIR}/configuration/settings.xml"
  fi
}

function build_maven() {
  # Where artefacts are created during build
  local output_dir=$1

  # Where to put the artefacts
  local app_dir=$2

  # Use main class if given
  local hawtapp_main_arg=""
  if [ x"${JAVA_MAIN_CLASS}" != x ]; then
    hawtapp_main_arg="-Dhawt-app.javaMainClass=${JAVA_MAIN_CLASS}"
  fi

  # Default args: no tests, if a module is specified, only build this module
  local maven_args=${MAVEN_ARGS:-package -DskipTests ${hawtapp_main_arg} -e ${MAVEN_MODULE:+ -pl $MAVEN_MODULE -am}}
  echo "Found pom.xml ... attempting to build with mvn ${maven_env_args} ${maven_args} ${MAVEN_EXTRA_ARGS}"

  local old_dir=$(pwd)
  cd ${S2I_SOURCE_DIR}
  check_error "changing directory to ${S2I_SOURCE_DIR}" $?

  # =========
  # Run Maven
  mvn ${maven_env_args} --version
  mvn ${maven_env_args} ${maven_args} ${MAVEN_EXTRA_ARGS}
  check_error "Maven build" $?

  # ==================================================================
  # Check for hawt-app dir and if not present run hawt-app explicitely
  if [ ! -d "${output_dir}/hawt-app" ]; then
     if [ x"${JAVA_MAIN_CLASS}" = x ]; then
       echo "No JAVA_MAIN_CLASS specified and no hawt-app-maven-plugin configured in the pom.xml"
       exit 1
     fi
     mvn ${maven_env_args} ${hawtapp_main_arg} ${MAVEN_MODULE:+-pl $MAVEN_MODULE -am} "io.fabric8:hawt-app-maven-plugin:${hawt_app_version}:build ${MAVEN_EXTRA_ARGS}"
  fi

  # ==============
  # Copy artefacts
  echo "Copying Maven artifacts from ${output_dir}/hawt-app to ${app_dir} ..."
  copy_dir "${output_dir}/hawt-app" ${app_dir}

  # cleanup maven build artifacts to reduce image size
  echo "Cleaning up maven build artifacts using mvn clean..."
  mvn ${maven_env_args} clean

  if [ "x${MAVEN_CLEAR_REPO}" != "x" ]; then
    rm -rf "${S2I_ARTIFACTS_DIR}/m2"
    check_error "Cannot remove local Maven repository ${S2I_ARTIFACTS_DIR}/m2" $?
  fi

  cd ${old_dir}
}

# =========================================================================
# Main

echo "=================================================================="
echo "Starting S2I Java Build ....."
build_dir=$(get_output_dir)
check_error "Cannot get output dir: $build_dir" $?
if [ -f "${S2I_SOURCE_DIR}/pom.xml" ]; then
  echo "Detected Maven build"
  # If a pom.xml is present use maven
  setup_maven
  build_maven  ${build_dir} ${DEPLOYMENTS_DIR}
else
  # Assuming that the source already contains compiled artefacts
  echo "Copying binaries from ${output_dir} to ${S2I_ARTIFACTS_DIR} ..."
  copy_dir ${build_dir} ${DEPLOYMENTS_DIR}
fi

echo "... done"
